h3. This is a Ruby tutorial

*let me state for the record that i don't like Oauth my experience with it till last month was none.  I have however been forced to use it and once i connected to my first webservice, i learned to live with it and now well we've become bitter-sweet friends*

I encourage you to run this in the console and watch the printout on the screen...

*Potential Bugs*

the 'oauth' gem has a few potential bugs
should you run into any errors include all these lines in your requires

@require 'oauth'
require 'oauth/consumer'
require 'oauth/token'@ 

you can install the ruby gem by copying and pasting the code below

@gem install oauth@

The aim of the tutorial is to simplify the OAuth process for the new user, get you on your feet and running!

h2. Agents in the wires

__For every token their is a secret__

There is always an end goal with all security systems and Oauth is no different
*The end goal with OAuth is to get an access token and secret*
Once you have these stored you have the keys to the city!

h2. Cosumer Token

__All good things come in threes__

Oauth will require you to unlock 3 doors
and along the way you will require three sets of token's and secret's
??I know your thinking f**King harry potter but you will after a while there is a certain elegance to Oauth??

These three sets are consumer, request and access

The good news is the first part is already done for you, When you register as a sound cloud developer
you get a consumer key and its partner the consumer secret

This Consumer pairing basically tells Oauth that's its your application 'asking for access'.  You can create a new consumer like this: 

@consumer = OAuth::Consumer.new(KEY, SECRET, {
        :site => "http://api.soundcloud.com, 
        :request_token_path => "/oauth/request_token",
        :access_token_path => "/oauth/access_token",
        :authorize_path => "/oauth/authorize",
        :scheme => :query_string
      })@
      
      
To get you started, i have included key-values (:site, :scheme etc don't worry about these to much for now)

REMEMBER THE GOAL: *to get an access token and secret*

h2.  Request Token

A request token is created from your consumer pair.
You can create a new request token, using the consumer you just created:

@request_token = consumer.get_request_token
puts request_token.token, request_token.secret@

stop! slowdown! where did all these new methods come from?

Well they came from the Oauth gem you installed
if you want to know how they work read the gems rDocs!!

so in the first line we are...

making a place to store the generated request token (which is generated from the consumer you just created)

@request_token = consumer.get_request_token("Your callback URL")@

*Your callback URL* this is the URL which soundcloud will send your user back to (after the next stage)

example:

@http://chipsandcheese.com/callback@

second line...

__we are outputing our 'request pair' to the console (we can just as easily use them in a session or store them somewhere else)__

@puts request_token.token@ 

__outputs the request token__

@puts request_token.secret@

__outputs the request secret__

the Oauth gem also provides us with an authorization URL
the authorization URL is where your application redirects to

in SoundClouds case it is

@api.soundcloud.com/oauth/request_token@

and this is generated for you simpily by calling athorize_url on the request token you created 

like so:

@request_token.authorize_url@

*REMEMBER: you need a way to store this request pair (you can find out how to do this with sessions in a later tutorial)*

h2. Breath

the user has now gone *But he will return* to the Callback url you specifyed earlier
and we will be ready oh yes we will!!

--------------------------------------------------------------------------------------

finish off on friday

Access token

@access_token = @request_token.get_access_token :oauth_verifier => params[:oauth_verifier]






